// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  
  // Name of the next breakpoint, or null for the last breakpoint.
  //
  //    >> breakpoint-next(sm)
  //    md
  //    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    md
  //    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
  //    md
  @function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.1.
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
  }
  
  
  // Creates text alignment classes based on screen size
  // TODO this would be nice to add to the framework
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      // Provide text `[text-{bp}]` attributes for aligning text based on screen size
      [text#{$infix}-center] {
        text-align: center;
      }
  
      [text#{$infix}-left] {
        text-align: left;
      }
  
      [text#{$infix}-right] {
        text-align: right;
      }
  
      [hidden#{$infix}-up] {
        display: none;
      }
    }
  
    @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
      [hidden#{$infix}-down] {
        display: none;
      }
    }
  }
  
// Dark Design Sidemenu
#menu-dark{
  .sidemenuHeader{
    ion-toolbar{
      .toolbar-background{background: $sidemenu_color;border:$sidemenu_color; }
      ion-buttons{
        button{color: #fff;}
      }
      .toolbar-content{
        ion-item{background: transparent;color: #fff;
          ion-avatar{background: #fff;color:$header_color;border-radius:50%;text-align: center;
            h2{margin: 0;font-size: 25px;line-height: 40px;color: $sidemenu_color;}
          }
          h2{font-size: 12px;font-weight: normal;}
          p{font-size: 11px;font-weight: normal;color:#fff;}
        }
      }
    }
  }
  .menu{background: $sidemenu_color;
    ion-list{
      button{background: transparent;color: #C9C7D3;font-size: 13px;
        .item-inner{border-bottom: 1px solid #474456 !important;
          img{width: 30px;height: 30px;vertical-align: middle;margin-right: 10px;margin-bottom: 5px;}
        }
      }
    }
  }
}